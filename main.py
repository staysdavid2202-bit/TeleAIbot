# ==================================================
# üîπ –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# ==================================================
import telebot
from openai import OpenAI
import requests
import os
import threading
import time
from pybit.unified_trading import HTTP
import random
from flask import Flask

# ==================================================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==================================================
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
CHAT_ID = os.getenv("CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
try:
    bybit_client = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")

# ==================================================
# üîπ Flask (–¥–ª—è Koyeb)
# ==================================================
@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç FinAI —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!"

# ==================================================
# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
# ==================================================
@bot.message_handler(commands=['start', '–Ω–∞—á–∞—Ç—å'])
def start_message(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FinAI ‚Äî –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n"
                          "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ <b>—Å–∏–≥–Ω–∞–ª</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.",
                 parse_mode="HTML")

# ==================================================
# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ==================================================
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()

    if "—Å–∏–≥–Ω–∞–ª" in text:
        bot.reply_to(message, get_future_signal(), parse_mode="HTML")
    elif "btc" in text or "–±–∏—Ç–∫–æ–∏–Ω" in text:
        send_crypto_info(message, "bitcoin")
    elif "eth" in text or "—ç—Ñ–∏—Ä" in text:
        send_crypto_info(message, "ethereum")
    else:
        generate_ai_reply(message)

# ==================================================
# üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
# ==================================================
def send_crypto_info(message, coin):
    try:
        r = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd")
        data = r.json()
        price = data[coin]["usd"]
        bot.reply_to(message, f"üí∞ {coin.capitalize()} —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${price}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")

# ==================================================
# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç FinAI (–ò–ò)
# ==================================================
def generate_ai_reply(message):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç FinAI."},
                {"role": "user", "content": message.text}
            ]
        )
        answer = response.choices[0].message.content
        bot.reply_to(message, answer)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")

# ==================================================
# üîπ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã)
# ==================================================
def get_future_signal():
    try:
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä
        pairs = [
            "BTCUSDT", "ETHUSDT", "XRPUSDT", "SOLUSDT", "BNBUSDT", "DOGEUSDT",
            "ADAUSDT", "AVAXUSDT", "DOTUSDT", "LTCUSDT", "LINKUSDT", "TRXUSDT",
            "SUIUSDT", "NEARUSDT", "OPUSDT", "ARBUSDT", "RNDRUSDT", "ATOMUSDT",
            "AAVEUSDT", "INJUSDT", "MATICUSDT", "ETCUSDT", "FILUSDT", "THETAUSDT",
            "FTMUSDT", "CHZUSDT", "HBARUSDT", "ENSUSDT", "GRTUSDT", "APEUSDT",
            "IMXUSDT", "COTIUSDT", "WLDUSDT", "SEIUSDT", "TIAUSDT", "PYTHUSDT",
            "JTOUSDT", "ARKMUSDT", "ORDIUSDT", "STRKUSDT", "NOTUSDT", "BLURUSDT",
            "SSVUSDT", "ACEUSDT", "BEAMUSDT", "SAGAUSDT", "MOVRUSDT", "HNTUSDT"
        ]

        pair = random.choice(pairs)
        direction = random.choice(["LONG", "SHORT"])

        ticker = bybit_client.get_tickers(category="linear", symbol=pair)
        price = float(ticker["result"]["list"][0]["lastPrice"])

        # –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω–µ–π TP –∏ SL
        sl_percent = 0.01
        tp1_percent = 0.01
        tp2_percent = 0.02
        tp3_percent = 0.03

        if direction == "LONG":
            stop_loss = price * (1 - sl_percent)
            tp1 = price * (1 + tp1_percent)
            tp2 = price * (1 + tp2_percent)
            tp3 = price * (1 + tp3_percent)
            emoji = "üü¢"
        else:
            stop_loss = price * (1 + sl_percent)
            tp1 = price * (1 - tp1_percent)
            tp2 = price * (1 - tp2_percent)
            tp3 = price * (1 - tp3_percent)
            emoji = "üî¥"

        accuracy = random.randint(90, 94)
        time_now = time.strftime("%H:%M:%S")

        signal_message = (
            f"üìä <b>FinAI ‚Äî –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (–§—å—é—á–µ—Ä—Å—ã)</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí± <b>–ü–∞—Ä–∞:</b> <code>{pair}</code>\n"
            f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {emoji} <b>{direction}</b>\n"
            f"üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${price:.4f}\n"
            f"üéØ <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy}%\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {time_now}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üõ° <b>Stop-Loss:</b> ${stop_loss:.4f}\n"
            f"üéØ <b>TP1:</b> ${tp1:.4f}\n"
            f"üéØ <b>TP2:</b> ${tp2:.4f}\n"
            f"üéØ <b>TP3:</b> ${tp3:.4f}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> —Ä–∏—Å–∫ ‚â§ 3% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.\n"
            f"ü§ñ <i>–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –ò–ò FinAI</i>"
        )
        return signal_message

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}"

# ==================================================
# üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
# ==================================================
def auto_signal():
    chat_id = CHAT_ID
    while True:
        signal = get_future_signal()
        bot.send_message(chat_id, signal, parse_mode="HTML")
        time.sleep(12 * 60 * 60)  # –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

# ==================================================
# üîπ –ó–∞–ø—É—Å–∫
# ==================================================
def run_bot():
    bot.infinity_polling()

if __name__ == "__main__":
    threading.Thread(target=auto_signal).start()
    port = int(os.getenv("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
