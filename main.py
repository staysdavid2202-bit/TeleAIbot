import telebot
from openai import OpenAI
import requests
import os
import threading
import time
from flask import Flask
from pybit.unified_trading import HTTP   # ‚úÖ Pybit –±–∏–±–ª–∏–æ—Ç–µ–∫–∞

# ======================================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ======================================
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

client = OpenAI(api_key=OPENAI_API_KEY)

# ======================================
# üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit —á–µ—Ä–µ–∑ Pybit
# ======================================
try:
    bybit_client = HTTP(
        testnet=False,
        api_key=BYBIT_API_KEY,
        api_secret=BYBIT_API_SECRET
    )
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")

# ======================================
# üåê Flask-—Å–µ—Ä–≤–µ—Ä
# ======================================
@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!"

# ======================================
# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
# ======================================
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∫—Ä–∏–ø—Ç—É, –Ω–µ—Ñ—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª üìà")

# ======================================
# üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
# ======================================
@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    text = message.text.lower()

    if "–±–∏—Ç–∫–æ–∏–Ω" in text or "bitcoin" in text:
        send_crypto_info(message, "bitcoin")
    elif "—ç—Ñ–∏—Ä" in text or "ethereum" in text:
        send_crypto_info(message, "ethereum")
    elif "–∑–æ–ª–æ—Ç–æ" in text:
        send_commodity_info(message, "–∑–æ–ª–æ—Ç–æ")
    elif "–Ω–µ—Ñ—Ç—å" in text:
        send_commodity_info(message, "–Ω–µ—Ñ—Ç—å")
    elif "—Å–∏–≥–Ω–∞–ª" in text:
        bot.reply_to(message, get_future_signal())
    else:
        generate_ai_reply(message)

# ======================================
# üí∞ –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
# ======================================
def send_crypto_info(message, coin):
    try:
        r = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd")
        data = r.json()
        price = data[coin]["usd"]
        bot.reply_to(message, f"üí∞ {coin.capitalize()} —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç {price}$")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")

# ======================================
# üì¶ –ò–Ω—Ñ–æ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
# ======================================
def send_commodity_info(message, item):
    bot.reply_to(message, f"üì¶ {item.capitalize()} ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–∫—Ç–∏–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞!")

# ======================================
# üó£Ô∏è –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞
# ======================================
def speak_text(text):
    try:
        audio = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice="alloy",
            input=text
        )
        with open("voice.ogg", "wb") as f:
            f.write(audio.read())
        return "voice.ogg"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
        return None

# ======================================
# ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
# ======================================
def generate_ai_reply(message):
    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = completion.choices[0].message.content
        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò-–æ—Ç–≤–µ—Ç–∞: {e}")

# ======================================
# üìà –°–∏–≥–Ω–∞–ª—ã –¥–ª—è Bybit
# ======================================
def get_future_signal():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º"""
    try:
        symbol = "BTCUSDT"
        ticker = bybit_client.get_tickers(category="linear", symbol=symbol)
        last_price = float(ticker["result"]["list"][0]["lastPrice"])

        import random
        direction = random.choice(["LONG", "SHORT"])
        return f"üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {direction} –ø–æ {symbol} –ø—Ä–∏ —Ü–µ–Ω–µ {last_price}$"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}"

# ======================================
# ‚è∞ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
# ======================================
def auto_signal():
    chat_id = os.getenv("CHAT_ID")  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Chat ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    while True:
        signal = get_future_signal()
        bot.send_message(chat_id, signal)
        time.sleep(12 * 60 * 60)

# ======================================
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Flask
# ======================================
def run_bot():
    bot.infinity_polling()

# –§–æ–Ω–æ–≤–∞—è –Ω–∏—Ç—å
thread = threading.Thread(target=run_bot)
thread.start()

# Flask –¥–ª—è Koyeb
port = int(os.getenv("PORT", 8000))
app.run(host="0.0.0.0", port=port)
