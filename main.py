import telebot
from openai import OpenAI
import requests
import os
import threading
import time
from flask import Flask
from pybit.unified_trading import HTTP
import random

# ============================================
# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ============================================

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
CHAT_ID = os.getenv("CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —á–µ—Ä–µ–∑ API
try:
    bybit_client = HTTP(
        api_key=BYBIT_API_KEY,
        api_secret=BYBIT_API_SECRET
    )
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")

# ============================================
# üåê Flask –¥–ª—è Koyeb
# ============================================
@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç FinAI —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!"

# ============================================
# üì© –ö–æ–º–∞–Ω–¥–∞ /start
# ============================================
@bot.message_handler(commands=['start', '–Ω–∞—á–∞—Ç—å'])
def start_message(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FinAI ‚Äî –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏–¥–µ–π.\n"
                          "–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ '—Å–∏–≥–Ω–∞–ª', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∏–¥–µ—é üìà")

# ============================================
# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================================
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()

    if "–±–∏—Ç–∫–æ–∏–Ω" in text or "btc" in text:
        send_crypto_info(message, "bitcoin")
    elif "—ç—Ñ–∏—Ä" in text or "eth" in text:
        send_crypto_info(message, "ethereum")
    elif "–∑–æ–ª–æ—Ç–æ" in text or "–Ω–µ—Ñ—Ç—å" in text:
        send_commodity_info(message, text)
    elif "—Å–∏–≥–Ω–∞–ª" in text:
        bot.reply_to(message, get_future_signal(), parse_mode="HTML")
    else:
        generate_ai_reply(message)

# ============================================
# üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
# ============================================
def send_crypto_info(message, coin):
    try:
        r = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd")
        data = r.json()
        price = data[coin]["usd"]
        bot.reply_to(message, f"üí∏ {coin.upper()} —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${price:.2f} üíµ")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")

# ============================================
# üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
# ============================================
def send_commodity_info(message, element):
    bot.reply_to(message, f"üõ¢ {element.capitalize()} ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä, –Ω–æ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã üíπ")

# ============================================
# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (FinAI)
# ============================================
def generate_ai_reply(message):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç FinAI."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = response.choices[0].message.content
        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")

# ============================================
# üîÆ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã)
# ============================================
def get_future_signal():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–∞—Ä—ã –∏–∑ Bybit (—Ñ—å—é—á–µ—Ä—Å—ã USDT)
        response = bybit_client.get_tickers(category="linear")
        pairs = [t['symbol'] for t in response['result']['list'] if 'USDT' in t['symbol']]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        pair = random.choice(pairs)
        direction = random.choice(["LONG", "SHORT"])
        ticker = bybit_client.get_tickers(category="linear", symbol=pair)
        price = float(ticker["result"]["list"][0]["lastPrice"])

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞
        emoji = "üü¢" if direction == "LONG" else "üî¥"
        confidence = random.randint(88, 95)
        timestamp = time.strftime("%H:%M:%S")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        signal_message = (
            f"üìä <b>FinAI ‚Äî –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (–§—å—é—á–µ—Ä—Å—ã)</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí± <b>–ü–∞—Ä–∞:</b> <code>{pair}</code>\n"
            f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {emoji} <b>{direction}</b>\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${price:.3f}\n"
            f"üéØ <b>–¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞:</b> {confidence}%\n"
            f"üïí <b>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {timestamp}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚ö†Ô∏è <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</i> –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∏—Å–∫ ‚â§ 3% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ —Å—Ç–∞–≤—å —Å—Ç–æ–ø-–ª–æ—Å—Å.\n"
        )
        return signal_message

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}"

# ============================================
# ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
# ============================================
def auto_signal():
    chat_id = CHAT_ID
    while True:
        signal = get_future_signal()
        bot.send_message(chat_id, signal, parse_mode="HTML")
        time.sleep(12 * 60 * 60)  # –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

# ============================================
# üöÄ –ó–∞–ø—É—Å–∫
# ============================================
def run_bot():
    bot.infinity_polling()

if __name__ == "__main__":
    threading.Thread(target=auto_signal).start()
    port = int(os.getenv("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
