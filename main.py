import telebot
import requests
import openai
import os
from flask import Flask
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!"

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üåû –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@bot.message_handler(func=lambda msg: True)
def reply_message(message):
    text = message.text.lower()

    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    if "–±–∏—Ç–∫–æ–∏–Ω" in text or "bitcoin" in text:
        send_crypto_info(message, "bitcoin")
    elif "—ç—Ñ–∏—Ä" in text or "ethereum" in text:
        send_crypto_info(message, "ethereum")
    elif "–∑–æ–ª–æ—Ç–æ" in text or "gold" in text:
        send_commodity_info(message, "gold")
    elif "–Ω–µ—Ñ—Ç—å" in text or "oil" in text:
        send_commodity_info(message, "oil")
    else:
        generate_ai_reply(message)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def send_crypto_info(message, symbol):
    try:
        r = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd")
        data = r.json()
        price = data[symbol]["usd"]
        bot.reply_to(message, f"üí∞ {symbol.capitalize()} —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${price:,}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {symbol}. –û—à–∏–±–∫–∞: {e}")

# –ö—É—Ä—Å –∑–æ–ª–æ—Ç–∞ –∏ –Ω–µ—Ñ—Ç–∏
def send_commodity_info(message, asset):
    try:
        if asset == "gold":
            url = "https://commodities-api.com/api/latest?access_key=YOUR_ACCESS_KEY&symbols=XAU"
            bot.reply_to(message, "üèÖ –ö—É—Ä—Å –∑–æ–ª–æ—Ç–∞ —Å–µ–π—á–∞—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è... (–¥–æ–±–∞–≤—å —Å–≤–æ–π –∫–ª—é—á –≤ API commodities-api.com)")
        elif asset == "oil":
            url = "https://api.api-ninjas.com/v1/commodities?symbol=WTI_OIL"
            bot.reply_to(message, "üõ¢ –ö—É—Ä—Å –Ω–µ—Ñ—Ç–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è... (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á –¥–ª—è –Ω–µ—Ñ—Ç–∏)")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û—Ç–≤–µ—Ç –æ—Ç ChatGPT
def generate_ai_reply(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}]
        )
        answer = response.choices[0].message.content
        bot.reply_to(message, answer)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    bot.infinity_polling()

thread = threading.Thread(target=run_bot)
thread.start()

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Koyeb
port = int(os.getenv("PORT", 8000))
app.run(host="0.0.0.0", port=port)
