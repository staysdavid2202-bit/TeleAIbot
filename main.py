import telebot
import requests
from openai import OpenAI
import os
from flask import Flask
import threading
import base64  # üîä –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!"

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üåü –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!")

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda msg: True)
def reply_message(message):
    text = message.text.lower()

    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    if "–±–∏—Ç–∫–æ–∏–Ω" in text or "bitcoin" in text:
        send_crypto_info(message, "bitcoin")
    elif "—ç—Ñ–∏—Ä" in text or "ethereum" in text:
        send_crypto_info(message, "ethereum")
    elif "–∑–æ–ª–æ—Ç–æ" in text or "gold" in text:
        send_commodity_info(message, "gold")
    elif "–Ω–µ—Ñ—Ç—å" in text or "oil" in text:
        send_commodity_info(message, "oil")
    else:
        generate_ai_reply(message)

def send_crypto_info(message, coin):
    try:
        r = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd")
        data = r.json()
        btc = data["bitcoin"]["usd"]
        eth = data["ethereum"]["usd"]
        bot.reply_to(message, f"üí∞ –ö—É—Ä—Å:\n‚Çø BTC: {btc}$\nüåê ETH: {eth}$")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.\n–û—à–∏–±–∫–∞: {e}")

def send_commodity_info(message, commodity):
    try:
        bot.reply_to(message, f"üìä {commodity.capitalize()} ‚Äî –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å!")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ {commodity}: {e}")

# üé§ –§—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞
def speak_text(text):
    try:
        response = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice="alloy",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'verse', 'sage' –∏ –¥—Ä.
            input=text
        )
        audio_data = response.audio
        audio_bytes = base64.b64decode(audio_data)
        filename = "voice.ogg"
        with open(filename, "wb") as f:
            f.write(audio_bytes)
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

# –û—Ç–≤–µ—Ç –ò–ò
def generate_ai_reply(message):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                {"role": "user", "content": message.text}
            ]
        )
        answer = response.choices[0].message.content
        bot.reply_to(message, answer)

        # üîä –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        audio_file = speak_text(answer)
        if audio_file:
            with open(audio_file, "rb") as f:
                bot.send_voice(message.chat.id, f)

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ò–ò: {e}")

# –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    bot.infinity_polling()

thread = threading.Thread(target=run_bot)
thread.start()

# Flask-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Koyeb)
port = int(os.getenv("PORT", 8000))
app.run(host="0.0.0.0", port=port)
