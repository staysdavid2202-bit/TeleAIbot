import telebot
from openai import OpenAI
import requests
import os
from flask import Flask
import threading
import bybit
import random
import time

# ===============================
# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ===============================
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit API
try:
    bybit_client = bybit.bybit(test=False, api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
    print("‚úÖ Bybit –ø–æ–¥–∫–ª—é—á—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Bybit: {e}")

# ===============================
# üåê Flask-—Å–µ—Ä–≤–µ—Ä
# ===============================
@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!"

# ===============================
# üß≠ –ö–æ–º–∞–Ω–¥–∞ /start
# ===============================
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üåü –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∫—Ä–∏–ø—Ç—É, –∑–æ–ª–æ—Ç–æ, –Ω–µ—Ñ—Ç—å –∏ –¥–∞–∂–µ –¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª üöÄ")

# ===============================
# üì© –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
# ===============================
@bot.message_handler(func=lambda msg: True)
def reply_message(message):
    text = message.text.lower()

    if "–±–∏—Ç–∫–æ–∏–Ω" in text or "bitcoin" in text:
        send_crypto_info(message, "bitcoin")
    elif "—ç—Ñ–∏—Ä" in text or "ethereum" in text:
        send_crypto_info(message, "ethereum")
    elif "–∑–æ–ª–æ—Ç–æ" in text or "gold" in text:
        send_commodity_info(message, "gold")
    elif "–Ω–µ—Ñ—Ç—å" in text or "oil" in text:
        send_commodity_info(message, "oil")
    elif "—Å–∏–≥–Ω–∞–ª" in text:
        bot.reply_to(message, get_future_signal())
    else:
        generate_ai_reply(message)

# ===============================
# üíπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
# ===============================
def send_crypto_info(message, coin):
    try:
        r = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd")
        data = r.json()
        price = data[coin]["usd"]
        bot.reply_to(message, f"üí∞ {coin.capitalize()} —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${price}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# ===============================
# üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—ã—Ä—å–µ
# ===============================
def send_commodity_info(message, commodity):
    bot.reply_to(message, f"{commodity.capitalize()} ‚Äî –æ–¥–∏–Ω –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤. ‚öôÔ∏è –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏!")

# ===============================
# üîä –§—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞
# ===============================
def speak_text(text):
    try:
        response = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice="alloy",
            input=text
        )
        audio_bytes = response.read()
        filename = "voice.ogg"
        with open(filename, "wb") as f:
            f.write(audio_bytes)
        return filename
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

# ===============================
# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
# ===============================
def generate_ai_reply(message):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."},
                {"role": "user", "content": message.text}
            ]
        )

        answer = response.choices[0].message.content
        bot.reply_to(message, answer)

        audio_file = speak_text(answer)
        if audio_file:
            with open(audio_file, "rb") as f:
                bot.send_voice(message.chat.id, f)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ò–ò: {e}")

# ===============================
# üìä –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ Bybit
# ===============================
def get_future_signal():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º"""
    try:
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
        symbol = random.choice(symbols)
        data = bybit_client.Market.Market_symbolInfo(symbol=symbol).result()[0]
        last_price = float(data['result'][0]['last_price'])
        
        if random.random() > 0.5:
            signal = f"üìà LONG {symbol} –ø–æ —Ü–µ–Ω–µ {last_price}"
        else:
            signal = f"üìâ SHORT {symbol} –ø–æ —Ü–µ–Ω–µ {last_price}"

        return f"üí° –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:\n{signal}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}"

def auto_signal():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤"""
    chat_id = os.getenv("CHAT_ID")  # –¥–æ–±–∞–≤—å CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    while True:
        signal = get_future_signal()
        bot.send_message(chat_id, signal)
        time.sleep(12 * 60 * 60)  # –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

# ===============================
# üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
# ===============================
def run_bot():
    bot.infinity_polling()

thread = threading.Thread(target=run_bot)
thread.start()

# ===============================
# üåç Flask-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Koyeb)
# ===============================
port = int(os.getenv("PORT", 8000))
app.run(host="0.0.0.0", port=port)
