# ==================================================
# üîπ –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# ==================================================
import telebot
from openai import OpenAI
import requests
import os
import threading
import time
from datetime import datetime
from pybit.unified_trading import HTTP
import random
from flask import Flask

# ==================================================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==================================================
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
CHAT_ID = os.getenv("CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

# ==================================================
# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
# ==================================================
try:
    bybit_client = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")

# ==================================================
# üîπ Flask –¥–ª—è Koyeb
# ==================================================
@app.route('/')
def home():
    return "ü§ñ FinAI —Ä–∞–±–æ—Ç–∞–µ—Ç (–∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã)."

# ==================================================
# üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
# ==================================================
def get_future_signal():
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã
        pairs = [
            "BTCUSDT", "ETHUSDT", "XRPUSDT", "SOLUSDT", "BNBUSDT", "DOGEUSDT",
            "ADAUSDT", "AVAXUSDT", "DOTUSDT", "LTCUSDT", "LINKUSDT", "TRXUSDT",
            "SUIUSDT", "NEARUSDT", "OPUSDT", "ARBUSDT", "RNDRUSDT", "ATOMUSDT",
            "AAVEUSDT", "INJUSDT", "MATICUSDT", "ETCUSDT", "FILUSDT", "THETAUSDT",
            "FTMUSDT", "CHZUSDT", "HBARUSDT", "ENSUSDT", "GRTUSDT", "APEUSDT",
            "IMXUSDT", "COTIUSDT", "WLDUSDT", "SEIUSDT", "TIAUSDT", "PYTHUSDT",
            "JTOUSDT", "ARKMUSDT", "ORDIUSDT", "STRKUSDT", "NOTUSDT", "BLURUSDT",
            "SSVUSDT", "ACEUSDT", "BEAMUSDT", "SAGAUSDT", "MOVRUSDT", "HNTUSDT"
        ]

        # –í—ã–±–æ—Ä –ø–∞—Ä—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        pair = random.choice(pairs)
        direction = random.choice(["LONG", "SHORT"])

        ticker = bybit_client.get_tickers(category="linear", symbol=pair)
        price = float(ticker["result"]["list"][0]["lastPrice"])

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
        sl_percent = 0.01
        tp1_percent = 0.01
        tp2_percent = 0.02
        tp3_percent = 0.03

        if direction == "LONG":
            stop_loss = price * (1 - sl_percent)
            tp1 = price * (1 + tp1_percent)
            tp2 = price * (1 + tp2_percent)
            tp3 = price * (1 + tp3_percent)
            emoji = "üü¢"
        else:
            stop_loss = price * (1 + sl_percent)
            tp1 = price * (1 - tp1_percent)
            tp2 = price * (1 - tp2_percent)
            tp3 = price * (1 - tp3_percent)
            emoji = "üî¥"

        avg_profit = (tp1_percent + tp2_percent + tp3_percent) / 3 * 100
        accuracy = random.randint(91, 94)
        time_now = datetime.utcnow().strftime("%H:%M UTC")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        signal_message = (
            f"üìä <b>FinAI ‚Äî –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (–§—å—é—á–µ—Ä—Å—ã)</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí± <b>–ü–∞—Ä–∞:</b> <code>{pair}</code>\n"
            f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {emoji} <b>{direction}</b>\n"
            f"üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${price:.4f}\n"
            f"üéØ <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy}%\n"
            f"üïí <b>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {time_now}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üõ° <b>Stop-Loss:</b> ${stop_loss:.4f}\n"
            f"üéØ <b>TP1:</b> ${tp1:.4f}\n"
            f"üéØ <b>TP2:</b> ${tp2:.4f}\n"
            f"üéØ <b>TP3:</b> ${tp3:.4f}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìä <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç:</b> {avg_profit:.1f}%\n"
            f"‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> —Ä–∏—Å–∫ ‚â§ 3% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.\n"
            f"ü§ñ <i>–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –ò–ò FinAI</i>"
        )
        return signal_message

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}"

# ==================================================
# üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Å—ã
# ==================================================
def schedule_signals():
    chat_id = CHAT_ID
    send_times = ["08:00", "14:00", "20:00"]

    while True:
        now = datetime.utcnow().strftime("%H:%M")
        if now in send_times:
            signal = get_future_signal()
            bot.send_message(chat_id, signal, parse_mode="HTML")
            print(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {now}")
            time.sleep(60)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        time.sleep(30)

# ==================================================
# üîπ –ë–æ—Ç –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# ==================================================
def run_bot():
    # –æ—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å
    print("ü§ñ FinAI –∑–∞–ø—É—â–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏.")
    while True:
        time.sleep(100000)

# ==================================================
# üîπ –ó–∞–ø—É—Å–∫
# ==================================================
if __name__ == "__main__":
    threading.Thread(target=schedule_signals).start()
    port = int(os.getenv("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
